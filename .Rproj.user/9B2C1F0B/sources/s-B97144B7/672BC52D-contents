#' Summarise many DESeq2 contrast
#'
#' Exports a table (\code{.csv}) and a heatmap of specified DESeq2 contrasts. This function is ment to quickly explore many contrast of interest out of a \code{dds} object. this function is not transladable to other dataset other than the tibolone-palmitato dataset as the column selection for the heatmap plot requires the selection of column specific names than for this function were selected for this project. To make this function reusable define a way to select the columns for the heatmap. Importantly, this is only for the general case but the alternative to supply an object with the sample names used for group can also be applied to general but I do not have time for this right now.
#'
#' This function only works if \code{dds_path} is encoded with ensembl IDs plus version (e.g. ENSBL00001111.1. The ".1" is important). If your data is not like that, then you will have to change the code in the section Mapping ID, by replacing the \code{str_replace} with another thing.
#'
#' @param dds_path DESeqDataSet. Obtained from running \link[DESeq2]{DESeq}. The object itself can be suplied or a quoted string defining the path to the \code{dds.rds} object (e.g. \code{my/folder/dds.rds}).
#' @param dds_rlog_path Quoted string to an existing path of a \code{.rds} object. To generate the heatmap the function will take the count matrix of rlog normalised pseudocounts as per \code{dds_rlog <- rlog(dds)}. Other count matrices can be supplied but the default is to z-sore normalise the input matrix and then filter the top 100 most extreme fold changes arranged by padj.
#' @param dds_type Character. Either \code{"general"} or \code{"group"} to specify if the contrast is factor vs factor or if instead it is a group vs group contrast controlling by an additional covariate. See the \href{https://bioconductor.org/packages/release/bioc/vignettes/DESeq2/inst/doc/DESeq2.html#interactions}{Interactions section in the DESeq2 vignette} for further explanation.
#' @param contrast_name list of \code{contrast} as described in \code{\link[DESeq2:results]{results}}. Level names can be seen by calling \code{resultsNames(dds)}.
#' @param treatment_names list of the paired levels' names in the same order as \code{contrast_name} to select the columns in the \code{dds_rlog_path} matrix for ploting on the heatmap. This will select the columns to display in the heatmap, that must be the same as the \code{contrast_name} so you must ensure that the sample names are unique identifiers for which you can check by calling \code{colData(dds_path)}.
#' @param output_path Quoted string to an existing path to store output files.
#' @param my_lfcThreshold integer. Decision rule cutoff (e.g. DESeq2 is 0.10).The smaller the more restrictive the threshold will be and fewer genes will pop up.
#' @param my_alpha integer. Cutoff for the Log2 Fold Change (e.g. DESeq2 default is 0, however 1.5 is also very common). The bigger the more restrictive the threshold will be and fewer genes will pop up.
#'
#' @return A heatmap and a comma separated file names after the contrast name.
#' @export
#'
#' @importFrom DESeq2 results
#' @importFrom dplyr filter count bind_rows
#'
#' @examples
#'
#' # General constrasts
#' data(dds)
#' dds_rlog <- rlog(dds)
#'
#' contrast_name <- list(c("condition","palmitato", "vehiculo"), c("condition","tib_pal", "vehiculo"), c("condition", "tibolona", "tib_pal"), c("condition","tibolona", "vehiculo"), c("condition", "palmitato", "tibolona"))
#'
#' tmp_dir <- tempdir()
#'
#' my_dds_summaries(dds_path = dds, dds_type = "general", dds_rlog = dds_rlog.rds, contrast_name = contrast_name, output_path = tmp_dir)
#'
#' # Group-specific constrasts
#'
#' dds$group <- factor(paste0(x$sex, x$condition))
#' dds$group <- relevel(dds$group, "femalevehiculo")
#' design(dds) <- ~ group
#' dds_group <- DESeq(dds)
#' dds_rlog <- rlog(dds)
#'
#' contrast_name <- list(c("group","maletibolona", "malevehiculo"), c("group","malepalmitato", "malevehiculo"), c("group","maletib_pal", "malevehiculo"), c("group","malepalmitato", "maletibolona"))
#'
#' treatment_names <- list(c("tibolona","vehiculo"), c("palmitato","vehiculo"), c("tib-pal","vehiculo"), c("palmitato","tibolona"))
#'
#' my_dds_summaries(dds_path = dds_group, dds_type = "group", dds_rlog = dds_rlog, contrast_name = contrast_name, treatment_names = treatment_names, output_path = tmp_dir)
#'

my_dds_summaries <- function(dds_path, dds_rlog_path, dds_type = "general", contrast_name, treatment_names, output_path, my_lfcThreshold = 0, my_alpha = 0.1) {

  stopifnot(class(contrast_name) == "list", file.exists(output_path))

  # Defining external functions
  saveWidgetFix <- function(widget, file, ...) {
    # https://github.com/ramnathv/htmlwidgets/issues/299
    ## A wrapper to saveWidget which compensates for arguable BUG in
    ## saveWidget which requires `file` to be in current working
    ## directory.
    wd <- getwd()
    on.exit(setwd(wd))
    outDir <- dirname(file)
    file <- basename(file)
    setwd(outDir)
    htmlwidgets::saveWidget(widget, file = file, ...)
  }

  # Files
  if (exists("dds_path")) {
    my_dds <- dds_path
  } else {
    my_dds <- readRDS(dds_path)
  }

  if (exists("dds_rlog_path")) {
    my_dds_rlog <- dds_rlog_path
  } else {
    my_dds_rlog <- readRDS(dds_rlog_path)
  }


  if (dds_type == "general") {
    lapply(1:length(contrast_name), function(i) {

      # Extract the results table
      if (length(contrast_name[[i]]) != 1) {
        res <- results(my_dds, contrast = contrast_name[[i]], lfcThreshold = my_lfcThreshold, alpha = my_alpha)
      } else {
        res <- results(my_dds, name = contrast_name[[i]], lfcThreshold = my_lfcThreshold, alpha = my_alpha)
      }

      # To ease its handling, lets convert the rownames to a column
      res <- res %>%
        as.data.frame() %>%
        rownames_to_column("Ensembl")

      #### Exporting csv ####
      # Create the unified dataframe with the genes below the decision rule cutoff and over and under the selected log2 threshold
      topVarGenes <- res %>%
        filter(log2FoldChange >= my_lfcThreshold, log2FoldChange <= -my_lfcThreshold, padj <= my_alpha)  %>%
        select(Ensembl) %>%
        unlist() %>%
        as.character()
      res_to_csv <- res[res$Ensembl %in% topVarGenes, ]

      # Map IDs
      res_to_csv$Ensembl <- str_replace(res_to_csv$Ensembl, pattern = ".[0-9]+$", replacement = "")
      mapIDs <- gconvert(res_to_csv$Ensembl, organism = "hsapiens", target = "ENSG", filter_na = F)
      mapIDs <- mapIDs %>% select(c(target, name, description))

      res_to_csv <- left_join(res_to_csv, mapIDs, by = c("Ensembl" = "target"))

      # Export the file
      file_name_csv <- paste0(output_path, contrast_name[[i]][1], "_", contrast_name[[i]][2], "_vs_", contrast_name[[i]][3], ".csv")
      res_to_csv %>%
        arrange(padj) %>%
        write.csv(file = file_name_csv, row.names = FALSE)

      # Call to reassure the user
      print(paste0("The excel file ", file_name_csv, " is done !"))

      #### Create the plot ####
      # Extracting matrix from rlog normalised pseudocounts
      mat <- assay(my_dds_rlog)

      # Slice and dice the mat by the genes with highest LFC and smallest pvalue and only those columns pertaining the contrast in question
      # Extracting the columns with the treatments of interest. However, if the contrast name contains tib_pal we need to convert it to tib-pal for grep
      if (contrast_name[[i]][2] == "tib_pal" | contrast_name[[i]][3] == "tib_pal") {
        if (contrast_name[[i]][2] == "tib_pal") {
          contrast_name[[i]][2] <- str_replace(contrast_name[[i]][2], "_", "-")
        } else {
          contrast_name[[i]][3] <- str_replace(contrast_name[[i]][3], "_", "-")
        }

        treatment_names <- paste(contrast_name[[i]][2], contrast_name[[i]][3], sep = "|")
      } else {
        treatment_names <- paste(contrast_name[[i]][2], contrast_name[[i]][3], sep = "|")
      }
      mat <- mat[ rownames(mat) %in% topVarGenes, grep(treatment_names, colnames(mat), value = F)]

      # Z-score normalising the matrix to maximase the signal
      mat_zscore <- t(apply(mat, 1, function(x) {
        (x - mean(x)) / sd(x)
      }))

      # Map IDs
      rownames(mat_zscore) <- str_replace(rownames(mat_zscore), pattern = ".[0-9]+$", replacement = "")
      mapIDs <- gconvert(rownames(mat_zscore), organism = "hsapiens", target = "ENSG", filter_na = F)
      mapIDs <- mapIDs %>% select(c(target, name))
      mat_zscore <- mat_zscore %>%
        as.data.frame() %>%
        rownames_to_column("Ensembl")
      mat_zscore <- left_join(mat_zscore, mapIDs, by = c("Ensembl" = "target"))
      mat_zscore <- mat_zscore %>%
        remove_rownames() %>%
        column_to_rownames("name") %>%
        select(-c(Ensembl))
      # Heatmap
      ph <- pheatmap(mat_zscore, show_rownames = T, border_color = NA, clustering_distance_cols = "correlation", clustering_distance_rows = "correlation", clustering_method = "ward.D2", angle_col = 45)

      # Exporting heatmap
      file_name_png <- paste0(output_path, contrast_name[[i]][1], "_", contrast_name[[i]][2], "_vs_", contrast_name[[i]][3], ".png")

      png(filename = file_name_png, width = 1200, height = 1000, units = "px")
      print(ph)
      dev.off()

      # Call to reassure the user
      print(paste0("The heatmap for ", file_name_png, " was exported."))

      #### Create the functional annotation per group ####

      # Adding the cluster ID to each gene. Pheatmap generates clusters from bottom to top. As there are up and down regulated genes there must be two row groups matching the up and down genes, so lets cut the row dendrogram into 2
      mat_zscore <- cbind(mat_zscore, clusterID = cutree(as.hclust(ph$tree_row), 2))

      # Call to reassure the user
      print("About to start the group-specific functional enrichment exports... ")

      # Number of clusters
      n_clusters <- length(levels(as.factor(mat_zscore[, "clusterID"])))
      lapply(1:n_clusters, function(j) {
        gene_names <- rownames(mat_zscore[mat_zscore[, "clusterID"] == j, ])
        gost_group <- gost(gene_names, organism = "hsapiens", ordered_query = T, evcodes = T)

        file_name_csv_group <- paste0(output_path, contrast_name[[i]][1], "_", contrast_name[[i]][2], "_vs_", contrast_name[[i]][3], "_group", j, ".csv")

        gost_group$result %>%
          select(-parents) %>%
          write.csv(file = file_name_csv_group)

        plotly_group <- gostplot(gost_group, interactive = T, capped = F)
        file_name_plotly_group <- paste0(output_path, contrast_name[[i]][1], "_", contrast_name[[i]][2], "_vs_", contrast_name[[i]][3], "_group", j, ".html")
        saveWidgetFix(plotly_group, file_name_plotly_group)

        file_name_enrichment_group <- paste0(output_path, contrast_name[[i]][1], "_", contrast_name[[i]][2], "_vs_", contrast_name[[i]][3], "_group", j)
        print(paste0("The per-group enrichment files for the contrast ", file_name_enrichment_group, " were exported."))
      })
    })
  } else if (dds_type == "group" & !missing(treatment_names)) {
    lapply(1:length(contrast_name), function(i) {

      # Extract the results table
      if (length(contrast_name[[i]]) != 1) {
        res <- results(my_dds, contrast = contrast_name[[i]], lfcThreshold = my_lfcThreshold, alpha = my_alpha)
      } else {
        res <- results(my_dds, name = contrast_name[[i]], lfcThreshold = my_lfcThreshold, alpha = my_alpha)
      }

      # To ease its handling, lets convert the rownames to a column
      res <- res %>%
        as.data.frame() %>%
        rownames_to_column("Ensembl")

      #### Exporting csv ####
      # Create the unified dataframe only for the high FC and smallest pvalues
      topVarGenes_down <- res %>%
        filter(log2FoldChange < 0) %>%
        arrange(padj) %>%
        head(50)
      topVarGenes_up <- res %>%
        filter(log2FoldChange > 0) %>%
        arrange(padj) %>%
        head(50)
      topVarGenes <- bind_rows(topVarGenes_down, topVarGenes_up) %>%
        select(Ensembl) %>%
        unlist() %>%
        as.character()
      res_to_csv <- res[res$Ensembl %in% topVarGenes, ]

      # Map IDs
      res_to_csv$Ensembl <- str_replace(res_to_csv$Ensembl, pattern = ".[0-9]+$", replacement = "")
      mapIDs <- gconvert(res_to_csv$Ensembl, organism = "hsapiens", target = "ENSG", filter_na = F)
      mapIDs <- mapIDs %>% select(c(target, name, description))

      res_to_csv <- left_join(res_to_csv, mapIDs, by = c("Ensembl" = "target"))

      # Export the file
      file_name_csv <- paste0(output_path, contrast_name[[i]][1], "_", contrast_name[[i]][2], "_vs_", contrast_name[[i]][3], ".csv")
      res_to_csv %>%
        arrange(padj) %>%
        write.csv(file = file_name_csv, row.names = FALSE)

      # Call to reassure the user
      print(paste0("The excel file ", file_name_csv, " is done !"))

      #### Create the plot ####
      # Create the annotation df
      df <- as.data.frame(colData(my_dds))
      df <- select(df, -group)

      # Extracting matrix from rlog normalised pseudocounts
      mat <- assay(my_dds_rlog)

      # Slice and dice the mat by the genes with highest LFC and smallest pvalue and only those columns pertaining the contrast in question

      treatment_names <- paste(treatment_names[[i]][1], treatment_names[[i]][2], sep = "|")

      mat <- mat[ rownames(mat) %in% topVarGenes, grep(treatment_names, colnames(mat), value = F)]

      # Z-score normalising the matrix to maximase the signal
      mat_zscore <- t(apply(mat, 1, function(x) {
        (x - mean(x)) / sd(x)
      }))

      # Map IDs
      rownames(mat_zscore) <- str_replace(rownames(mat_zscore), pattern = ".[0-9]+$", replacement = "")
      mapIDs <- gconvert(rownames(mat_zscore), organism = "hsapiens", target = "ENSG", filter_na = F)
      mapIDs <- mapIDs %>% select(c(target, name))
      mat_zscore <- mat_zscore %>%
        as.data.frame() %>%
        rownames_to_column("Ensembl")
      mat_zscore <- left_join(mat_zscore, mapIDs, by = c("Ensembl" = "target"))
      mat_zscore <- mat_zscore %>%
        remove_rownames() %>%
        column_to_rownames("name") %>%
        select(-c(Ensembl))
      # Heatmap
      ph <- pheatmap(mat_zscore, show_rownames = T, annotation_col = df, border_color = NA, clustering_distance_cols = "correlation", clustering_distance_rows = "correlation", clustering_method = "ward.D2", cutree_cols = 2, cutree_rows = 2, angle_col = 45)

      # Exporting heatmap
      file_name_png <- paste0(output_path, contrast_name[[i]][1], "_", contrast_name[[i]][2], "_vs_", contrast_name[[i]][3], ".png")

      png(filename = file_name_png, width = 1200, height = 1000, units = "px")
      print(ph)
      dev.off()

      # Call to reassure the user
      print(paste0("The heatmap for ", file_name_png, " was exported."))

      #### Create the functional annotation per group ####

      # Adding the cluster ID to each gene. Pheatmap generates clusters from bottom to top. As there are up and down regulated genes there must be two row groups matching the up and down genes, so lets cut the row dendrogram into 2
      mat_zscore <- cbind(mat_zscore, clusterID = cutree(as.hclust(ph$tree_row), 2))

      # Call to reassure the user
      print("About to start the group-specific functional enrichment exports... ")

      # Number of clusters
      n_clusters <- length(levels(as.factor(mat_zscore[, "clusterID"])))
      lapply(1:n_clusters, function(j) {
        gene_names <- rownames(mat_zscore[mat_zscore[, "clusterID"] == j, ])

        tryCatch({
          gost_group <- gost(gene_names, organism = "hsapiens", ordered_query = T, evcodes = T)

          file_name_csv_group <- paste0(output_path, contrast_name[[i]][1], "_", contrast_name[[i]][2], "_vs_", contrast_name[[i]][3], "_group", j, ".csv")

          gost_group$result %>%
            select(-parents) %>%
            write.csv(file = file_name_csv_group)
        }, finally = {
          plotly_group <- gostplot(gost_group, interactive = T, capped = F)
          file_name_plotly_group <- paste0(output_path, contrast_name[[i]][1], "_", contrast_name[[i]][2], "_vs_", contrast_name[[i]][3], "_group", j, ".html")
          saveWidgetFix(plotly_group, file_name_plotly_group)

          file_name_enrichment_group <- paste0(output_path, contrast_name[[i]][1], "_", contrast_name[[i]][2], "_vs_", contrast_name[[i]][3], "_group", j)
          print(paste0("The per-group enrichment files for the contrast ", file_name_enrichment_group, " were exported."))
        })
      })
    })
  }
}
